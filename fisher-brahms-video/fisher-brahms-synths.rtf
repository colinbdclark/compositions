{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
}
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 (\
	~left = \cf2 Buffer\cf0 .read(s, \cf3 "/Users/colin/Desktop/Fisher Brahms/01 Concerto for Violin and Orchestra in D major op.77, I. Allegro non troppo.L.wav"\cf0 );\
	~right =  \cf2 Buffer\cf0 .read(s,  \cf3 "/Users/colin/Desktop/Fisher Brahms/01 Concerto for Violin and Orchestra in D major op.77, I. Allegro non troppo.R.wav"\cf0 );\
)\
\
\
(\
	\cf2 SynthDef\cf0 (\cf3 "River"\cf0 , \{\
		\cf2 arg\cf0  bufnum, outputBusNum, \
		       volTrigger = 0.0, \
		       volAttack = 2.5,  volRelease = 2.5, volLevel = 1.0,\
		       speed = 1.0,\
		       dramaticVolumeThreshold = 0.1;\
		       \
		\cf2 var\cf0  fadeEnv, speedEnv, rate, driver, player, envelopedPlayer, dramaListener, dramaOnSender, dramaOffSender;\
	\
		\cf4 // An envelope to shape the attack and decay of the buffer when playback is triggered.\cf0 \
		fadeEnv = \cf2 Env\cf0 .asr(\
			attackTime: volAttack, \
			sustainLevel: volLevel, \
			releaseTime: volRelease\
		);\
		\
		\cf4 // Control the playback of the buffer.\cf0 \
		driver = \cf2 Phasor\cf0 .ar(\
			trig: 0,\
			rate: \cf2 BufRateScale\cf0 .kr(bufnum) * speed,\
			start: 0,\
			end: \cf2 BufFrames\cf0 .kr(bufnum)\
		);\
		\
		player = \cf2 BufRd\cf0 .ar(\
			numChannels: 1,\
			bufnum: bufnum,\
			phase: driver\
		);\
\
		envelopedPlayer = player * \cf2 EnvGen\cf0 .ar(fadeEnv, gate: volTrigger);\
		\
		\cf4 // Listen for swells in ampltude and send a trigger to the language if it crosses the threshold.\
\cf0 \
		dramaListener = \cf2 Latch\cf0 .ar(\
			in: \cf2 Amplitude\cf0 .ar(\
				in: player,\
				attackTime: 0.01,\
				releaseTime: 0.01\
			),\
			trig: \cf2 Dust\cf0 .kr(0.2)\
		);\
		\
		dramaOnSender = \cf2 SendTrig\cf0 .ar(dramaListener > dramaticVolumeThreshold, 1, driver);	\
		dramaOffSender = \cf2 SendTrig\cf0 .ar(dramaListener < dramaticVolumeThreshold, 0, driver);\
		\
		\cf2 Out\cf0 .ar(outputBusNum, envelopedPlayer);\
		\
	\}).send(s);\
	\
	\cf2 SynthDef\cf0 (\cf3 "Looper"\cf0 , \{\
		\cf2 arg\cf0  bufnum, \
		       outputBusNum, \
		       speed = 0.5,\
		       trig = 0,\
		       start = 0,\
		       end = \cf2 BufFrames\cf0 .kr(bufnum);\
		\
		\cf2 var\cf0  looper, player;\
		\
		looper = \cf2 Phasor\cf0 .ar(\
			trig: trig,\
			rate: \cf2 BufRateScale\cf0 .kr(bufnum) * speed,\
			start: start,\
			end: end\
		);\
		\
		player = \cf2 BufRd\cf0 .ar(\
			numChannels: 1,\
			bufnum: bufnum,\
			phase: looper,\
			loop: 1\
		) * 0.5; \cf4 /** EnvGen.ar(fadeEnv, gate: volTrigger)*/\cf0  \cf4 // TODO: Envelope the looper\cf0 \
		\
		\cf2 Out\cf0 .ar(outputBusNum, player);\
	\}).send(s);\
\
\
	\cf2 SynthDef\cf0 (\cf3 "OutputController"\cf0 , \{\
		\cf2 arg\cf0  riverBusNum, looperBusNum, outputBusNum, isDramatic = 0;\
		\
		var river, looper;\
		\
		river = In.ar(riverBusNum, 1);\
		looper = In.ar(looperBusNum, 1);\
		\
		\cf2 Out\cf0 .ar(\
			bus: outputBusNum,\
			channelsArray: Select.ar(isDramatic, [\
				river, looper\
			])\
		);\
	\}).send(s);\
)\
}